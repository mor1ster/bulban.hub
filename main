local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Bulban Hub " .. Fluent.Version,
    SubTitle = "By Mor1ster",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {  
    Main = Window:AddTab({ Title = "Main", Icon = "" }),  
    Teleports = Window:AddTab({ Title = "Teleports", Icon = "" }),  
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })  
}  

local Options = Fluent.Options  

do  
    Fluent:Notify({  
        Title = "Notification",  
        Content = "This is a notification",  
        SubContent = "SubContent", -- Optional  
        Duration = 5 -- Set to nil to make the notification not disappear  
    })  

    Tabs.Main:AddParagraph({  
        Title = "Paragraph",  
        Content = "This is a paragraph.\nSecond line!"  
    })  
end -- Закрывающая скобка для блока do

Tabs.Teleports:AddButton({  
    Title = "Port Jackson",  
    Description = "Teleports your character to Port Jackson island",  
    Callback = function()  
        local player = game.Players.LocalPlayer  
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then  
            player.Character.HumanoidRootPart.CFrame = CFrame.new(3.608856201171875, 54.31372833251953, -61.85613250732422)  
        else  
            print("Character or HumanoidRootPart not found!")  
        end  
    end  
})

    Tabs.Main:AddButton({
        Title = "Sell all",
        Description = "Selling all fish in your inventory",
        Callback = function()
            Window:Dialog({
                Title = "are you sure?",
                Content = "Are you sure you want to sell all the fish in your inventory",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            local ohString1 = "SellEverything"

                            game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.processGameItemSold:InvokeServer(ohString1)
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("You don't want to sell your fish")
                        end
                    }
                }
            })
        end
    })

local FishingToggle = Tabs.Main:AddToggle("FishingToggle", {  
    Title = "auto catching",  
    Default = false  
})  

local fishingLoop -- Переменная для хранения задачи  

FishingToggle:OnChanged(function(value)  
    if value then  
        print("Fishing активирован")  

        -- Запускаем цикл для проверки видимости элемента  
        fishingLoop = task.spawn(function()  
            while true do -- Необходим бесконечный цикл  
                if not FishingToggle then -- Проверяем состояние тумблера  
                    print("Fishing деактивирован")  
                    break -- Выход из цикла, если тумблер выключен  
                end  

                local player = game:GetService("Players").LocalPlayer  
                if player and player.PlayerGui and player.PlayerGui.Interface and player.PlayerGui.Interface.Fishing and player.PlayerGui.Interface.Fishing.FishingMeter then  
                    local fishingMeterVisible = player.PlayerGui.Interface.Fishing.FishingMeter.Visible == true
                    
                    if fishingMeterVisible then  
                        game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.FishCaught:FireServer()  
                    else  
                        print("FishingMeter невиден, вызов функции FishCaught пропущен")  
                    end  
                else  
                    print("FishingMeter не найден")  
                end  
                
                wait(4) -- Ждем 1 секунду перед следующей проверкой  
            end  
        end)  
    else  
        print("Fishing деактивирован")  
        if fishingLoop then  
            task.cancel(fishingLoop) -- Останавливаем цикл  
            fishingLoop = nil -- Сброс переменной  
        end  
    end  
end)

    local JumpSlider = Tabs.Main:AddSlider("JumpPowerSlider", {  
        Title = "Jump Power",  
        Description = "Set Jump Power",  
        Default = 50,  
        Min = 50,  
        Max = 500,  
        Rounding = 1,  
        Callback = function(Value)  
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value -- Corrected syntax  
        end  
    })  

    JumpSlider:OnChanged(function(Value)  
        print("Jump Power changed:", Value)  
    end)  

    JumpSlider:SetValue(50)  

    local WalkSpeedSlider = Tabs.Main:AddSlider("WalkSpeedSlider", {  
        Title = "Walk Speed",  
        Description = "Set Walk Speed",  
        Default = 16,  
        Min = 16,  
        Max = 300,  
        Rounding = 1,  
        Callback = function(Value)  
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value -- Corrected syntax  
        end  
    })  

    WalkSpeedSlider:OnChanged(function(Value)  
        print("Walk Speed changed:", Value)  
    end)  

    WalkSpeedSlider:SetValue(16)
    
    local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Dropdown",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = false,
        Default = 1,
    })

    Dropdown:SetValue("four")

    Dropdown:OnChanged(function(Value)
        print("Dropdown changed:", Value)
    end)


    
    local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
        Title = "Dropdown",
        Description = "You can select multiple values.",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = true,
        Default = {"seven", "twelve"},
    })

    MultiDropdown:SetValue({
        three = true,
        five = true,
        seven = false
    })

    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end
        print("Mutlidropdown changed:", table.concat(Values, ", "))
    end)



    local Colorpicker = Tabs.Main:AddColorpicker("Colorpicker", {
        Title = "Colorpicker",
        Default = Color3.fromRGB(96, 205, 255)
    })

    Colorpicker:OnChanged(function()
        print("Colorpicker changed:", Colorpicker.Value)
    end)
    
    Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))



    local TColorpicker = Tabs.Main:AddColorpicker("TransparencyColorpicker", {
        Title = "Colorpicker",
        Description = "but you can change the transparency.",
        Transparency = 0,
        Default = Color3.fromRGB(96, 205, 255)
    })

    TColorpicker:OnChanged(function()
        print(
            "TColorpicker changed:", TColorpicker.Value,
            "Transparency:", TColorpicker.Transparency
        )
    end)



    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    -- OnClick is only fired when you press the keybind and the mode is Toggle
    -- Otherwise, you will have to use Keybind:GetState()
    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)

    Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold


    local Input = Tabs.Main:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

Input.OnChanged(function()  
    print("Input updated:", Input.Value)  
end)
