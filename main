local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Bulban Hub " .. Fluent.Version,
    SubTitle = "By Mor1ster",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {  
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    SharksAutoFarm = Window:AddTab({ Title = "SharksAutoFarm", Icon = "" }),  
    Teleports = Window:AddTab({ Title = "Teleports", Icon = "" }),  
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })  
}  

local Options = Fluent.Options  

do  
    Fluent:Notify({  
        Title = "Notification",  
        Content = "This is a notification",  
        SubContent = "SubContent", -- Optional  
        Duration = 5 -- Set to nil to make the notification not disappear  
    })  

    Tabs.Main:AddParagraph({  
        Title = "Main",  
        Content = "this is a best script for Fishong Simulator"  
    })  
end 

local autofarmKillerWhale = Tabs.SharksAutoFarm:AddToggle("autofarmKillerWhale", {  
    Title = "Auto Farm Killer Whale",  
    Default = false  
})  

local Players = game:GetService("Players")  
local Workspace = game:GetService("Workspace")  
local RunService = game:GetService("RunService")  

local LocalPlayer = Players.LocalPlayer  
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()  


local isAutoFarming = false  


local function farmKillerWhale()  
    local killerWhale = Workspace:FindFirstChild("KillerWhale")  

    if killerWhale and killerWhale:IsA("Model") then  
        if killerWhale:FindFirstChild("HumanoidRootPart") then  
            -- Перемещение к KillerWhale  
            character:MoveTo(killerWhale.HumanoidRootPart.Position)  
            wait(1) 

               game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
               wait(3)  
            end  
        end  
    end  


RunService.RenderStepped:Connect(function()  
    if isAutoFarming then  
        farmKillerWhale()  
    end  
end)  


autofarmKillerWhale:OnChanged(function(state)  
    isAutoFarming = state  
    print("AutoFarmKillerWhale is now " .. tostring(isAutoFarming))  
end)

local autofarmVoidHammerheadShark = Tabs.SharksAutoFarm:AddToggle("autofarmVoidHammerheadShark", {  
    Title = "Auto Farm Void Hammerhead Shark",  
    Default = false  
})  

local Players = game:GetService("Players")  
local Workspace = game:GetService("Workspace")  
local RunService = game:GetService("RunService")  

local LocalPlayer = Players.LocalPlayer  
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()  

local isAutoFarming = false  

local function farmVoidHammerheadShark()  
    local voidHammerheadShark = Workspace:FindFirstChild("VoidHammerheadShark")  

    if voidHammerheadShark and voidHammerheadShark:IsA("Model") then  
        if voidHammerheadShark:FindFirstChild("HumanoidRootPart") then  
            -- Перемещение к VoidHammerheadShark  
            character:MoveTo(voidHammerheadShark.HumanoidRootPart.Position)  
            wait(1)  

            -- Simulate clicking on the Void Hammerhead Shark  
            game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
            wait(3)  
        end  
    end  
end  

RunService.RenderStepped:Connect(function()  
    if isAutoFarming then  
        farmVoidHammerheadShark()  
    end  
end)  

autofarmVoidHammerheadShark:OnChanged(function(state)  
    isAutoFarming = state  
    print("AutoFarmVoidHammerheadShark is now " .. tostring(isAutoFarming))  
end)

local autofarmBigGreatWhiteShark = Tabs.SharksAutoFarm:AddToggle("autofarmBigGreatWhiteShark", {  
    Title = "Auto Farm BigGreatWhiteShark",  
    Default = false  
})  

local Players = game:GetService("Players")  
local Workspace = game:GetService("Workspace")  
local RunService = game:GetService("RunService")  


local LocalPlayer = Players.LocalPlayer  
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()  

local isAutoFarming = false  

 
local function farmBigGreatWhiteShark()  
    local BigGreatWhiteShark = Workspace:FindFirstChild("BigGreatWhiteShark")  

    if BigGreatWhiteShark and BigGreatWhiteShark:IsA("Model") then  
        if BigGreatWhiteShark:FindFirstChild("HumanoidRootPart") then  
             
            character:MoveTo(BigGreatWhiteShark.HumanoidRootPart.Position)  
            wait(1)  

               game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
               wait(3)   
            end  
        end  
    end   
  
RunService.RenderStepped:Connect(function()  
    if isAutoFarming then  
        farmBigGreatWhiteShark()  
    end  
end)  

local autofarmArmoredShark = Tabs.SharksAutoFarm:AddToggle("autofarmArmoredShark", {  
    Title = "Auto Farm Armored Shark",  
    Default = false  
})  

local Players = game:GetService("Players")  
local Workspace = game:GetService("Workspace")  
local RunService = game:GetService("RunService")  

local LocalPlayer = Players.LocalPlayer  
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()  

local isAutoFarming = false  

local function ArmoredShark()  
    local ArmoredShark = Workspace:FindFirstChild("ArmoredShark")  

    if ArmoredShark and ArmoredShark:IsA("Model") then  
        if ArmoredShark:FindFirstChild("HumanoidRootPart") then  
            -- Перемещение к ArmoredShark  
            character:MoveTo(ArmoredShark.HumanoidRootPart.Position)  
            wait(1)   

            game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
            wait(3)  
        end  
    end  
end  

RunService.RenderStepped:Connect(function()  
    if isAutoFarming then  
        ArmoredShark()  
    end  
end)  

autofarmArmoredShark:OnChanged(function(state)  
    isAutoFarming = state  
    print("AutoFarmArmoredShark is now " .. tostring(isAutoFarming))  
end)

local autofarmElephantSeal = Tabs.SharksAutoFarm:AddToggle("autofarmElephantSeal", {  
    Title = "Auto Farm Elephant Seal",  
    Default = false  
})  

local Players = game:GetService("Players")  
local Workspace = game:GetService("Workspace")  
local RunService = game:GetService("RunService")  

local LocalPlayer = Players.LocalPlayer  
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()  

local isAutoFarming = false  

local function ElephantSeal()  
    local ElephantSeal = Workspace:FindFirstChild("ElephantSeal")  

    if ElephantSeal and ElephantSeal:IsA("Model") then  
        if ElephantSeal:FindFirstChild("HumanoidRootPart") then  
            -- Перемещение к ElephantSeal  
            character:MoveTo(ElephantSeal.HumanoidRootPart.Position)  
            wait(1)   

            game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
            wait(3)  
        end  
    end  
end  

RunService.RenderStepped:Connect(function()  
    if isAutoFarming then  
        ElephantSeal()  
    end  
end)  

autofarmElephantSeal:OnChanged(function(state)  
    isAutoFarming = state  
    print("AutoFarmElephantSeal is now " .. tostring(isAutoFarming))  
end)

local autofarmPiranha = Tabs.SharksAutoFarm:AddToggle("autofarmPiranha", {  
    Title = "Auto Farm Piranha",  
    Default = false  
})  

local Players = game:GetService("Players")  
local Workspace = game:GetService("Workspace")  
local RunService = game:GetService("RunService")  

local LocalPlayer = Players.LocalPlayer  
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()  

local isAutoFarming = false  

local function Piranha()  
    local Piranha = Workspace:FindFirstChild("Piranha")  

    if Piranha and Piranha:IsA("Model") then  
        if Piranha:FindFirstChild("HumanoidRootPart") then  
            -- Перемещение к Piranha  
            character:MoveTo(Piranha.HumanoidRootPart.Position)  
            wait(1)   

            game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
            wait(3)  
        end  
    end  
end  

RunService.RenderStepped:Connect(function()  
    if isAutoFarming then  
        Piranha()  
    end  
end)  

autofarmPiranha:OnChanged(function(state)  
    isAutoFarming = state  
    print("AutoFarmPiranha is now " .. tostring(isAutoFarming))  
end)

local autofarmGreatWhiteShark = Tabs.SharksAutoFarm:AddToggle("autofarmGreatWhiteShark", {  
    Title = "Auto Farm Great White Shark",  
    Default = false  
})  

local Players = game:GetService("Players")  
local Workspace = game:GetService("Workspace")  
local RunService = game:GetService("RunService")  

local LocalPlayer = Players.LocalPlayer  
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()  

local isAutoFarming = false  

local function GreatWhiteShark()  
    local GreatWhiteShark = Workspace:FindFirstChild("GreatWhiteShark")  

    if GreatWhiteShark and GreatWhiteShark:IsA("Model") then  
        if GreatWhiteShark:FindFirstChild("HumanoidRootPart") then  
            -- Перемещение к GreatWhiteShark  
            character:MoveTo(GreatWhiteShark.HumanoidRootPart.Position)  
            wait(1)   

            game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
            wait(3)  
        end  
    end  
end  

RunService.RenderStepped:Connect(function()  
    if isAutoFarming then  
        GreatWhiteShark()  
    end  
end)  

autofarmGreatWhiteShark:OnChanged(function(state)  
    isAutoFarming = state  
    print("AutoFarmGreatWhiteShark is now " .. tostring(isAutoFarming))  
end)

Tabs.Teleports:AddButton({  
    Title = "create safe plot",  
    Description = "",  
    Callback = function()  

local part = Instance.new("Part")


part.Parent = game.Workspace


part.Name = "fishingscript22222"
part.Size = Vector3.new(20, 1, 20)
part.Position = Vector3.new(720.171875, 56.91303634643555, 137.61924743652344)
part.Anchored = true
part.BrickColor = BrickColor.new("White")
part.Transparency = 0.5 
part.Reflectance = 0.3 
part.Material = Enum.Material.Plastic
        end   
})

Tabs.Teleports:AddButton({  
    Title = "Port Jackson",  
    Description = "Teleports your character to Port Jackson island",  
    Callback = function()  
        local player = game.Players.LocalPlayer  
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then  
            player.Character.HumanoidRootPart.CFrame = CFrame.new(3.608856201171875, 54.31372833251953, -61.85613250732422)  
        else  
            print("Character or HumanoidRootPart not found!")  
        end  
    end  
})

Tabs.SharksAutoFarm:AddButton({  
    Title = "collect all dropped items",  
    Description = "teleport",  
    Callback = function()  
        local player = game.Players.localPlayer  
        local character = player.Character  
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")  

         
        if humanoidRootPart then  
            local droppedItem = game.Workspace:FindFirstChild("DroppedItems") and game.Workspace.DroppedItems:FindFirstChild("Model")  

             
            if droppedItem then  
                local targetCFrame  

                if droppedItem:FindFirstChild("MeshPart") then  
                    targetCFrame = droppedItem.MeshPart.CFrame  
                elseif droppedItem:FindFirstChild("Handle") then  
                    targetCFrame = droppedItem.Handle.CFrame  
                end  

                 
                if targetCFrame then  
                    humanoidRootPart.CFrame = targetCFrame  
                else  
                    warn("Neither MeshPart nor Handle found in dropped items.")  
                end  
            else  
                warn("DroppedItems or Model not found in Workspace.")  
            end  
        else  
            warn("HumanoidRootPart not found.")  
        end  
    end  
})


Tabs.Teleports:AddButton({  
    Title = "Shadow Isles",  
    Description = "Teleports your character to Shadow Isles",  
    Callback = function()  
        local player = game.Players.LocalPlayer  
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then  
            player.Character.HumanoidRootPart.CFrame = CFrame.new(2128.172607421875, 69.34028625488281, -2298.905517578125)  
        else  
            print("Character or HumanoidRootPart not found!")  
        end  
    end  
})

Tabs.Teleports:AddButton({  
    Title = "EruptionIsland",  
    Description = "Teleports your character to EruptionIsland",  
    Callback = function()  
        local player = game.Players.LocalPlayer  
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then  
            player.Character.HumanoidRootPart.CFrame = CFrame.new(2932.861572265625, 45.837257385253906, 1478.976806640625)  
        else  
            print("Character or HumanoidRootPart not found!")  
        end  
    end  
})

Tabs.Teleports:AddButton({  
    Title = "MonstersBorough",  
    Description = "Teleports your character to MonstersBorough",  
    Callback = function()  
        local player = game.Players.LocalPlayer  
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then  
            player.Character.HumanoidRootPart.CFrame = CFrame.new(-3292.45849609375, 59.704376220703125, 2744.042724609375)  
        else  
            print("Character or HumanoidRootPart not found!")  
        end  
    end  
})

Tabs.Teleports:AddButton({  
    Title = "AncientShores",  
    Description = "Teleports your character to AncientShores",  
    Callback = function()  
        local player = game.Players.LocalPlayer  
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then  
            player.Character.HumanoidRootPart.CFrame = CFrame.new(-2627.64501953125, 65.83248901367188, -1879.483642578125)  
        else  
            print("Character or HumanoidRootPart not found!")  
        end  
    end  
})

Tabs.Teleports:AddButton({  
    Title = "crate store",  
    Description = "Teleports your character to crate store",  
    Callback = function()  
        local player = game.Players.LocalPlayer  
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then  
            player.Character.HumanoidRootPart.CFrame = CFrame.new(-16.52875328063965, 53.72869110107422, -14.293245315551758)  
        else  
            print("Character or HumanoidRootPart not found!")  
        end  
    end  
})

    Tabs.Teleports:AddParagraph({  
        Title = "temporary event",  
        Content = "temporary event 1 hour"  
    })  

Tabs.Teleports:AddButton({  
    Title = "PressurePlates",  
    Description = "1",  
    Callback = function()  
        local player = game.Players.LocalPlayer  
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then  
            player.Character.HumanoidRootPart.CFrame = CFrame.new(-2566.498291015625, 116.96729278564453, -1607.6053466796875)  
        else  
            print("Character or HumanoidRootPart not found!")  
        end  
    end  
})

Tabs.Teleports:AddButton({  
    Title = "PressurePlates",  
    Description = "2",  
    Callback = function()  
        local player = game.Players.LocalPlayer  
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then  
            player.Character.HumanoidRootPart.CFrame = CFrame.new(-2674.945556640625, 155.6043243408203, -2121.1591796875)  
        else  
            print("Character or HumanoidRootPart not found!")  
        end  
    end  
})

Tabs.Teleports:AddButton({  
    Title = "PressurePlates",  
    Description = "3",  
    Callback = function()  
        local player = game.Players.LocalPlayer  
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then  
            player.Character.HumanoidRootPart.CFrame = CFrame.new(-2901.402099609375, 68.41624450683594, -2228.263427734375)  
        else  
            print("Character or HumanoidRootPart not found!")  
        end  
    end  
})

    Tabs.Main:AddButton({
        Title = "Sell all",
        Description = "Selling all fish in your inventory",
        Callback = function()
            Window:Dialog({
                Title = "are you sure?",
                Content = "Are you sure you want to sell all the fish in your inventory",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            local ohString1 = "SellEverything"

                            game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.processGameItemSold:InvokeServer(ohString1)
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("You don't want to sell your fish")
                        end
                    }
                }
            })
        end
    })

    local SellEverythingToggle = Tabs.Main:AddToggle("SellEverythingLoop", {  
    Title = "Sell Everything Loop",  
    Default = false  
})

local ohString1 = "SellEverything"  


SellEverythingToggle.Callback = function(value)  
    if value then  
        
        spawn(function()  
            while SellEverythingToggle do  
                
                game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.processGameItemSold:InvokeServer(ohString1)  
                
                 
                wait(1)
            end  
        end)  
    end  
end

local FishingToggle = Tabs.Main:AddToggle("FishingToggle", {  
    Title = "auto catching",  
    Default = false  
})  

local fishingLoop  

FishingToggle:OnChanged(function(value)  
    if value then  
        print("Fishing Works")  

         
        fishingLoop = task.spawn(function()  
            while true do
                if not FishingToggle then
                    print("Fishing deactivation")  
                    break  
                end  

                local player = game:GetService("Players").LocalPlayer  
                if player and player.PlayerGui and player.PlayerGui.Interface and player.PlayerGui.Interface.Fishing and player.PlayerGui.Interface.Fishing.FishingMeter then  
                    local fishingMeterVisible = player.PlayerGui.Interface.Fishing.FishingMeter.Visible == true  
                    
                    if fishingMeterVisible then  
                        game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.FishCaught:FireServer()  
                        wait(1) 
                    else  
                        print("")  
                        wait(1)
                    end  
                else  
                    print("")  
                end  

                wait(4) 
            end  
        end)  
    else  
        print("")  
        if fishingLoop then  
            task.cancel(fishingLoop) 
            fishingLoop = nil
        end  
    end  
end)

local fishbitingToggle = Tabs.Main:AddToggle("fishbitingToggle", {  
    Title = "auto fishbiting",  
    Default = false  
})  

local fishbitingLoop

fishbitingToggle:OnChanged(function(value)  
    if value then  
        print("")  

        
        fishbitingLoop = task.spawn(function()  
            while true do
                if not fishbitingToggle then
                    print("")  
                    break 
                end  

                local player = game:GetService("Players").LocalPlayer  
                if player and player.PlayerGui and player.PlayerGui.Interface and player.PlayerGui.Interface.Fishing and player.PlayerGui.Interface.Fishing.FishingMeter then  
                    local fishbitinginvisible = player.PlayerGui.Interface.Fishing.FishingMeter.Visible == false
                    
                    if fishbitinginvisible then  
                        game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.FishBiting:InvokeServer() 
                    else  
                        print("")  
                    end  
                else  
                    print("")  
                end  
                
                wait(0.25)
            end  
        end)  
    else  
        print("")  
        if fishbitingLoop then  
            task.cancel(fishbitingLoop)
            fishbitingLoop = nil  
        end  
    end  
end)

local fishbitingAncientToggle = Tabs.Main:AddToggle("fishbitingAncientToggle", {  
    Title = "auto fishbitingAncient",  
    Default = false  
})  

local fishbitingAncientLoop

fishbitingAncientToggle:OnChanged(function(value)  
    if value then  
        print("")  

        
        fishbitingAncientLoop = task.spawn(function()  
            while true do
                if not fishbitingAncientToggle then
                    print("")  
                    break 
                end  

                local player = game:GetService("Players").LocalPlayer  
                if player and player.PlayerGui and player.PlayerGui.Interface and player.PlayerGui.Interface.Fishing and player.PlayerGui.Interface.Fishing.FishingMeter then  
                    local fishbitingAncientinvisible = player.PlayerGui.Interface.Fishing.FishingMeter.Visible == false
                    
                    if fishbitingAncientinvisible then  
                        game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.FishBiting:InvokeServer()
                    else  
                        print("")  
                    end  
                else  
                    print("")  
                end  
                
                wait(0.25)
            end  
        end)  
    else  
        print("")  
        if fishbitingAncientLoop then  
            task.cancel(fishbitingAncientLoop)
            fishbitingAncientLoop = nil  
        end  
    end  
end)

-- Create the toggle for autofarm  
local autofarmToggle = Tabs.Main:AddToggle("autofarm", {  
    Title = "autofarm (works only with auto baiting and auto catching)",  
    Default = false  
})  

local function autofarm()  
    while autofarmToggle.Value do  
        game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
        wait(1)  
        game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
        wait(0.45)  
        game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
        wait(0.45)  
        game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
        wait(0.3)  
        game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
        wait(0.45)  
        game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
        wait(0.5)  
        game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
        wait(0.45)  
        game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
        wait(0.45)  
        game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))  
    end  
end  

autofarmToggle:OnChanged(function()  
    if autofarmToggle.Value then  
        autofarm()  -- Start the autofarm function  
    end  
end)

    local JumpSlider = Tabs.Main:AddSlider("JumpPowerSlider", {  
        Title = "Jump Power",  
        Description = "Set Jump Power",  
        Default = 50,  
        Min = 50,  
        Max = 500,  
        Rounding = 1,  
        Callback = function(Value)  
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value -- Corrected syntax  
        end  
    })  

    JumpSlider:OnChanged(function(Value)  
        print("Jump Power changed:", Value)  
    end)  

    JumpSlider:SetValue(50)  

    local WalkSpeedSlider = Tabs.Main:AddSlider("WalkSpeedSlider", {  
        Title = "Walk Speed",  
        Description = "Set Walk Speed",  
        Default = 16,  
        Min = 16,  
        Max = 300,  
        Rounding = 1,  
        Callback = function(Value)  
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value -- Corrected syntax  
        end  
    })  

    WalkSpeedSlider:OnChanged(function(Value)  
        print("Walk Speed changed:", Value)  
    end)  

    WalkSpeedSlider:SetValue(16)
    

Tabs.Main:AddButton({  
    Title = "buy stone chest (costs 1,000 coins)",  
    Description = "You can use an auto clicker and it will be crazy",  
    Callback = function()  
        local ohString1 = "stonechest"
        local ohBoolean2 = false

        game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.OpenLootboxFunction:InvokeServer(ohString1, ohBoolean2)
        end  
   })

Tabs.Main:AddButton({  
    Title = "buy silver chest (costs 5,000 coins)",  
    Description = "You can use an auto clicker and it will be crazy",  
    Callback = function()  
        local ohString1 = "silverchest"
        local ohBoolean2 = false

        game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.OpenLootboxFunction:InvokeServer(ohString1, ohBoolean2)
        end  
   })

Tabs.Main:AddButton({  
    Title = "buy Timber chest (costs 10,000 coins)",  
    Description = "You can use an auto clicker and it will be crazy",  
    Callback = function()  
         local ohString1 = "timberchest"
         local ohBoolean2 = false

         game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.OpenLootboxFunction:InvokeServer(ohString1, ohBoolean2)
        end  
   })

Tabs.Main:AddButton({  
    Title = "buy crown chest (costs 35,000 coins)",  
    Description = "You can use an auto clicker and it will be crazy",  
    Callback = function()  
         local ohString1 = "crownchest"
         local ohBoolean2 = false

         game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.OpenLootboxFunction:InvokeServer(ohString1, ohBoolean2)
        end  
   })

Tabs.SharksAutoFarm:AddButton({  
    Title = "you invicible for shark and whale",  
    Description = "invicible",  
    Callback = function()  
      _G.damage = (true or false)
      while _G.damage do
          wait()
          pcall(function()
      for i,v in pairs(workspace:GetChildren()) do
          if v.ClassName == "Model" and v:FindFirstChild("Hitbox") and v.Hitbox:FindFirstChild("TouchInterest") then
         v.Hitbox:FindFirstChild("TouchInterest"):Destroy()
      task.wait()
         end
          end
         end)
      end
   end
 })

 Tabs.SharksAutoFarm:AddButton({  
    Title = "test",  
    Description = "invicible",  
    Callback = function()  
      _G.damage = (true or false)
      while _G.damage do
          wait()
          pcall(function()
      for i,v in pairs(workspace:GetChildren()) do
          if v.ClassName == "Model" and v:FindFirstChild("Hanle") and v.Handle then
         v.Handle:Destroy()
      task.wait()
         end
          end
         end)
      end
   end
 })

    local Baits = game:GetService("Players").LocalPlayer.PlayerGui.Interface.FishVault.PlayerInventoryPage.Frame.PlayerInventoryPage.List.Container
    local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
        Title = "Dropdown",
        Description = "You can select multiple values.",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = true,
        Default = {"seven", "twelve"},
    })

    MultiDropdown:SetValue({
        three = true,
        five = true,
        seven = false
    })

    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end
        print("Mutlidropdown changed:", table.concat(Values, ", "))
    end)



    local Colorpicker = Tabs.Main:AddColorpicker("Colorpicker", {
        Title = "Colorpicker",
        Default = Color3.fromRGB(96, 205, 255)
    })

    Colorpicker:OnChanged(function()
        print("Colorpicker changed:", Colorpicker.Value)
    end)
    
    Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))



    local TColorpicker = Tabs.Main:AddColorpicker("TransparencyColorpicker", {
        Title = "Colorpicker",
        Description = "but you can change the transparency.",
        Transparency = 0,
        Default = Color3.fromRGB(96, 205, 255)
    })

    TColorpicker:OnChanged(function()
        print(
            "TColorpicker changed:", TColorpicker.Value,
            "Transparency:", TColorpicker.Transparency
        )
    end)



    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    -- OnClick is only fired when you press the keybind and the mode is Toggle
    -- Otherwise, you will have to use Keybind:GetState()
    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)

    Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold


    local Input = Tabs.Main:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

Input.OnChanged(function()  
    print("Input updated:", Input.Value)  
end)
