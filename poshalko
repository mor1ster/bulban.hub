-- Load the DrRay library from the GitHub repository Library
local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()

-- Create a new window and set its title and theme
local window = DrRayLibrary:Load("DrRay!", "Default")

-- Create the first tab with an image ID
local tab1 = DrRayLibrary.newTab("Main", "ImageIdHere")

Main.newToggle("Toggle", "Toggle! (prints the state)", true, function(toggleState)
    if toggleState then
        print("On")
    else
        print("Off")
    end
end)
Main.newInput("Input", "Prints your input.", function(text)
    print("Entered text in Tab 1: " .. text)
end)

-- Create the second tab with a different image ID
local tab2 = DrRayLibrary.newTab("Esp", "ImageIdLogoHere")

-- Add elements to the second tab
Esp.newLabel("Hello, this is Tab 2.")
Esp.newButton("Button", "Prints Hello!", function()
    print('Hello!')
end)

local FillColor = Color3.fromRGB(255, 255, 0)  -- Цвет выделения  
local DepthMode = "AlwaysOnTop"                 -- Режим глубины  
local FillTransparency = 0.5                     -- Прозрачность заполнения  
local OutlineColor = Color3.fromRGB(255, 255, 255)  -- Цвет обводки  
local OutlineTransparency = 0                     -- Прозрачность обводки  

local CoreGui = game:FindService("CoreGui")  
local TreeRegions = game.Workspace.World.TreeRegions  
local BirchForest = TreeRegions.BirchForest  

local connections = {}  
local highlightStorage = Instance.new("Folder")  
highlightStorage.Name = "Highlight_Storage"  
highlightStorage.Parent = CoreGui  

-- Функция для создания Highlight для дерева  
local function createHighlight(tree)  
    local highlight = Instance.new("Highlight")  
    highlight.Name = tree.Name  
    highlight.FillColor = FillColor  
    highlight.DepthMode = DepthMode  
    highlight.FillTransparency = FillTransparency  
    highlight.OutlineColor = OutlineColor  
    highlight.OutlineTransparency = OutlineTransparency  
    highlight.Parent = highlightStorage  
    
    highlight.Adornee = tree  
end  

-- Функция для удаления Highlight  
local function removeHighlight(tree)  
    local highlight = highlightStorage:FindFirstChild(tree.Name)  
    if highlight then  
        highlight:Destroy()  
    end  
end

-- Функция для выделения всех деревьев в BirchForest  
local function highlightForestTrees()  
    for _, tree in ipairs(BirchForest:GetChildren()) do  
        if tree:IsA("Model") and tree.Name == "Tree" then  
            createHighlight(tree)  
        end  
    end  
end  

-- Функция для удаления всех выделений деревьев  
local function removeAllHighlights()  
    for _, tree in ipairs(BirchForest:GetChildren()) do  
        if tree:IsA("Model") and tree.Name == "Tree" then  
            removeHighlight(tree)  
        end  
    end  
end  

-- Переключатель для включения и отключения выделений  
Esp.newToggle("Toggle", "EspBearchTrees", true, function(toggleState)  
    if toggleState then  
        highlightForestTrees()  -- Выделяем деревья, если переключатель включен  
    else  
        removeAllHighlights()    -- Убираем выделения, если переключатель выключен  
    end  
end)  

-- Инициализация при загрузке скрипта  
highlightForestTrees() -- Выделить деревья при запуске, если переключатель включен по умолчанию
Esp.newDropdown("Dropdown", "Select one of these options!", {"water", "dog", "air", "bb", "airplane", "wohhho", "yeay", "delete"}, function(selectedOption)
    print(selectedOption)
end)
