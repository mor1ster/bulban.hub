local Util = {}  
local library =  
    loadstring(game:HttpGet("https://raw.githubusercontent.com/raz1elkaa/oaklands/main/Sunkengui.lua"))()  

print("Loading User Interface")  

local TreeRegions = Game.Workspace.World.TreeRegions  
local data = {}  

-- Убедитесь, что все переменные объявлены  
local Title = "Bulban Hub" -- Замените на ваше значение  
local Outdated = "Updated" -- Замените на ваше значение  
local Player = game.Players.LocalPlayer  
local Character = Player.Character or Player.CharacterAdded:Wait()   -- Убедитесь, что это правильно  
local Players = game:GetService("Players")  

local island = {  
    Grasslands2 = TreeRegions["Grasslands2"],  
    JungleForest = TreeRegions["JungleForest"],  
    JungleForestEdge = TreeRegions["JungleForestEdge"],  
    JungleSparse = TreeRegions["JungleSparse"],  
    KelpForest = TreeRegions["Kelp Forest"],  
    MagmaCave_Main = TreeRegions["MagmaCave_Main"],  
    MagmaCave_Special = TreeRegions["MagmaCave_Special"],  
    MagmaTree = TreeRegions["MagmaTree"],  
    MapleForest = TreeRegions["MapleForest"],  
    MapleForestEdge = TreeRegions["MapleForestEdge"],  
    MixedForest = TreeRegions["MixedForest"],  
    MixedForestEdge = TreeRegions["MixedForestEdge"],  
    MixedSparse = TreeRegions["MixedSparse"],  
    Mushroom = TreeRegions["Mushroom"],  
    Mushroom2 = TreeRegions["Mushroom2"],  
    Mushroom2Infected = TreeRegions["Mushroom2-Infected"],  
    OakForest = TreeRegions["OakForest"],  
    OakForestEdge = TreeRegions["OakForestEdge"],  

    Oasis = TreeRegions["Oasis"],  
    OasisPools = TreeRegions["Oasispools"],  
    OceanBeachsides = TreeRegions["OceanBeachsides"],  
    OliveForest = TreeRegions["OliveForest"],  
    OliveForestEdge = TreeRegions["OliveForestEdge"],  
    PurpleBamboo = TreeRegions["PurpleBamboo"],  
    Ravine = TreeRegions["Ravine"],  
    RedForest = TreeRegions["RedForest"],  
    RedForestEdge = TreeRegions["RedForestEdge"],  
    RiverCavePlek = TreeRegions["RiverCavePlek"],  
    RiverDesert = TreeRegions["RiverDesert"],  
    RiverDesertBeach = TreeRegions["RiverDesertBeach"],  
    RiverDesertWater = TreeRegions["RiverDesertWater"],  
    RiverGrass = TreeRegions["RiverGrass"],  
    RiverGrassBeach = TreeRegions["RiverGrassBeach"],  
    RiverGrassWater = TreeRegions["RiverGrassWater"],  
    SakuraTest = TreeRegions["SakuraTest"],  
    Savannah2 = TreeRegions["Savannah2"],  

    Aurora = TreeRegions["Aurora"],  
    Beach = TreeRegions["Beach"],  
    BirchForest = TreeRegions["BirchForest"],  
    BirchForestEdge = TreeRegions["BirchForestEdge"],  
    BirchMixedForest = TreeRegions["BirchMixedForest"],  
    BirchMixedForestEdge = TreeRegions["BirchMixedForestEdge"],  
    BirchMixedSparse = TreeRegions["BirchMixedSparse"],  
    BluePineForest = TreeRegions["BluePineForest"],  
    BluePineForestEdge = TreeRegions["BluePineForestEdge"],  
    BluePineSparse = TreeRegions["BluePineSparse"],  
    Bonespawns = TreeRegions["Bonespawns"],  
    CorruptedDesert = TreeRegions["CorruptedDesert"],  
    CorruptedHighlands = TreeRegions["CorruptedHighlands"],  
    CorruptedPeaks = TreeRegions["CorruptedPeaks"],  
    CorruptedRavine = TreeRegions["CorruptedRavine"],  
    CorruptionMushrooms = TreeRegions["CorruptionMushrooms"],  
    DarkOakForest = TreeRegions["DarkOakForest"],  
    DarkOakForestEdge = TreeRegions["DarkOakForestEdge"],  
    DeadMagmaTree = TreeRegions["DeadMagmaTree"],  

    DesertBeach = TreeRegions["DesertBeach"],  
    DesertHighlands = TreeRegions["DesertHighlands"],  
    DesertLowlands = TreeRegions["DesertLowlands"],  
    DesertOtherHighlands = TreeRegions["DesertOtherHighlands"],  
    DesertOtherHighlandsRare = TreeRegions["DesertOtherHighlandsRare"],  
    DesertPeaks = TreeRegions["DesertPeaks"],  
    EasterBeach = TreeRegions["EasterBeach"],  
    EasterGrass = TreeRegions["EasterGrass"],  
    FarBeach = TreeRegions["FarBeach"],  
    FarlandsEntrance = TreeRegions["FarlandsEntrance"],  
    FarlandsMain = TreeRegions["FarlandsMain"],  
    FarlandsPine = TreeRegions["FarlandsPine"],  
    FloweringMeadowsLower = TreeRegions["FloweringMeadowsLower"],  
    Grasslands2 = TreeRegions["Grasslands2"],  
    JungleForest = TreeRegions["JungleForest"],  
    JungleForestEdge = TreeRegions["JungleForestEdge"],  

    MixedSnowMainland = TreeRegions["mixedsnowmainland"],  
    OokLake = TreeRegions["ooklake"],  
    SequoiaSnow = TreeRegions["sequoiasnow"],  
    SnowTreeCommon = TreeRegions["snowtreecommon"],  
    SnowTreeRare = TreeRegions["snowtreerare"],  
    SnowTreeUncommon = TreeRegions["snowtreeuncommon"],  
    SpruceSnow = TreeRegions["sprucesnow"],  

    SavannahForest = TreeRegions["SavannahForest"],  
    SavannahForestEdge = TreeRegions["SavannahForestEdge"],  
    SavannahSparse = TreeRegions["SavannahSparse"],  
    Sequoia = TreeRegions["Sequoia"],  
    SparseBeach = TreeRegions["SparseBeach"],  
    Special = TreeRegions["Special"],  
    SpruceForest = TreeRegions["SpruceForest"],  
    SpruceForestEdge = TreeRegions["SpruceForestEdge"],  
    WanForest = TreeRegions["WanForest"],  
    WanForestEdge = TreeRegions["WanForestEdge"],  
    WanSparse = TreeRegions["WanSparse"],  
    ArticKelp = TreeRegions["artickelp"],  
    BluePineSnow = TreeRegions["bluepinesnow"],  
    IcelandBluePine = TreeRegions["icelandsbluepine"],  
    IcelandMixed = TreeRegions["icelandsmixed"],  
    IcelandMixedSlopes = TreeRegions["icelandsmixedslopes"],  
    IcelandPine = TreeRegions["icelandspine"],  
    MainLandPine = TreeRegions["mainlandpine"]  
}

local main =  
    library:Load {  
    Name = Title .. " | script status: " .. Outdated,  
    SizeX = 550,  
    SizeY = 600,  
    Theme = "Midnight",  
    Extension = "oaktree",  
    Folder = "oaklands"  
}   

function Util.GetClosestTree()  
    local tree, dist = nil, math.huge  
    for i, v in next, game:GetService("Workspace").World.TreeRegions.Island:GetChildren() do  
        if v:IsA("Model") and v:FindFirstChild("OctagonPart") then  
            local mag = game.Players.LocalPlayer:DistanceFromCharacter(v:GetPivot().Position)  
            if mag < dist then  
                dist = mag  
                tree = v  
            end  
        end  
    end  
    return tree  
end  

function Util.GetOwnedOres()  
    local ores = {}  
    for i, v in next, game:GetService("Workspace").World.LooseItems:GetChildren() do  
        if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == game.Players.LocalPlayer.Name and v.Name == "Rock" then  
            if v:FindFirstChildWhichIsA("BasePart") then  
                table.insert(ores, v)  
            end  
        end  
    end  
    return ores  
end  

function Util.GetLowestTreePart(parts)  
    local foot = Character.RightFoot.Position  
    local closest, dist = nil, math.huge  
    for i, v in next, parts do  
        if v:IsA("BasePart") then  
            local mag = (foot - v.Position).Magnitude  
            if mag < dist then  
                dist = mag  
                closest = v  
            end  
        end  
    end  
    return closest  
end  

function Util.GetClosestLog()  
    local log, dist = nil, math.huge  
    for i, v in next, Util.GetOwnedTrees() do  
        local mag = Player:DistanceFromCharacter(v:GetPivot().Position)  
        if mag < dist then  
            dist = mag  
            log = v  
        end  
    end  
    return log  
end  

function Util.KeyPress(keyCode, time)  
    Services.VirtualInputManager:SendKeyEvent(true, keyCode, false, game)  
    task.wait(time)  
    Services.VirtualInputManager:SendKeyEvent(false, keyCode, false, game)  
end  

function Util.GetPlayerByName(Name)  
    for i, v in next, Players:GetPlayers() do  
        if v ~= Player and (v.Name:lower():find(Name:lower()) or v.DisplayName:lower():find(Name:lower())) then  
            return v  
        end  
    end  
end  

function Util.TeleportToPlayer(targetPlayer)  
    if targetPlayer.Character then  
        Teleport(targetPlayer.Character:GetPivot())  
    end  
end  

function Util.GetOres()  
    local ores = {}  
    for i, v in next, Services.Workspace.World.RockRegions.Island:GetChildren() do  
        if v:GetAttribute("Mineable") == true then  
            table.insert(ores, v)  
        end  
    end  
    return ores  
end  

function Util.GetClosestOre()  
    local ores = Util.GetOres()  
    local ore, dist = nil, math.huge  
    for i, v in next, ores do  
        local mag = Player:DistanceFromCharacter(v:GetPivot().Position)  
        if mag < dist then  
            dist = mag  
            ore = v  
        end  
    end  
    return ore  
end  

function Util.GetPlayersPlot(Name)  
    for i, v in next, Services.Workspace.World.Property:GetDescendants() do  
        if v.Name == "Owner" and v.Parent.Parent.Name == "Property" then  
            local plotOwner = tostring(v.Value)  
            if plotOwner:lower():find(Name:lower()) then  
                return v.Parent:FindFirstChild("MainRegion")  
            end  
        end  
    end
end
